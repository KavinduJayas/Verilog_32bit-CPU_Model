$date
	Wed Oct 21 11:06:53 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbed $end
$var wire 8 ! RESULT [7:0] $end
$var reg 8 " DATA1 [7:0] $end
$var reg 8 # DATA2 [7:0] $end
$var reg 3 $ SELECT [2:0] $end
$scope module myALU $end
$var wire 8 % DATA1 [7:0] $end
$var wire 8 & DATA2 [7:0] $end
$var wire 3 ' SELECT [2:0] $end
$var wire 8 ( or_out [7:0] $end
$var wire 8 ) forward_out [7:0] $end
$var wire 8 * and_out [7:0] $end
$var wire 8 + add_out [7:0] $end
$var reg 8 , RESULT [7:0] $end
$scope module Add $end
$var wire 8 - DATA1 [7:0] $end
$var wire 8 . DATA2 [7:0] $end
$var reg 8 / RESULT [7:0] $end
$upscope $end
$scope module And $end
$var wire 8 0 DATA1 [7:0] $end
$var wire 8 1 DATA2 [7:0] $end
$var reg 8 2 RESULT [7:0] $end
$upscope $end
$scope module Forward $end
$var wire 8 3 DATA2 [7:0] $end
$var reg 8 4 RESULT [7:0] $end
$upscope $end
$scope module Or $end
$var wire 8 5 DATA1 [7:0] $end
$var wire 8 6 DATA2 [7:0] $end
$var reg 8 7 RESULT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 7
b1001110 6
b10000001 5
bx 4
b1001110 3
bx 2
b1001110 1
b10000001 0
bx /
b1001110 .
b10000001 -
bx ,
bx +
bx *
bx )
bx (
bx '
b1001110 &
b10000001 %
bx $
b1001110 #
b10000001 "
bx !
$end
#1
b1001110 !
b1001110 ,
b1001110 )
b1001110 4
b0 *
b0 2
b11001111 (
b11001111 7
#2
b11001111 +
b11001111 /
#10
b11001111 !
b11001111 ,
b11 #
b11 &
b11 .
b11 1
b11 3
b11 6
b1 "
b1 %
b1 -
b1 0
b1 5
b1 $
b1 '
#11
b11 )
b11 4
b1 *
b1 2
b11 (
b11 7
#12
b100 !
b100 ,
b100 +
b100 /
#15
b1 !
b1 ,
b11101010 #
b11101010 &
b11101010 .
b11101010 1
b11101010 3
b11101010 6
b11010101 "
b11010101 %
b11010101 -
b11010101 0
b11010101 5
b10 $
b10 '
#16
b11000000 !
b11000000 ,
b11101010 )
b11101010 4
b11000000 *
b11000000 2
b11111111 (
b11111111 7
#17
b10111111 +
b10111111 /
#20
b11111111 !
b11111111 ,
b10 #
b10 &
b10 .
b10 1
b10 3
b10 6
b1 "
b1 %
b1 -
b1 0
b1 5
b11 $
b11 '
#21
b11 !
b11 ,
b10 )
b10 4
b0 *
b0 2
b11 (
b11 7
#22
b11 +
b11 /
#25
b10 !
b10 ,
b1111110 #
b1111110 &
b1111110 .
b1111110 1
b1111110 3
b1111110 6
b10000001 "
b10000001 %
b10000001 -
b10000001 0
b10000001 5
b0 $
b0 '
#26
b1111110 !
b1111110 ,
b1111110 )
b1111110 4
b11111111 (
b11111111 7
#27
b11111111 +
b11111111 /
#100
