$date
	Tue Oct 20 21:11:46 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbed $end
$var wire 8 ! RESULT [7:0] $end
$var reg 8 " DATA1 [7:0] $end
$var reg 8 # DATA2 [7:0] $end
$var reg 3 $ SELECT [2:0] $end
$scope module myALU $end
$var wire 8 % DATA1 [7:0] $end
$var wire 8 & DATA2 [7:0] $end
$var wire 3 ' SELECT [2:0] $end
$var wire 8 ( or_out [7:0] $end
$var wire 8 ) forward_out [7:0] $end
$var wire 8 * and_out [7:0] $end
$var wire 8 + add_out [7:0] $end
$var reg 8 , RESULT [7:0] $end
$scope module Add $end
$var wire 8 - DATA1 [7:0] $end
$var wire 8 . DATA2 [7:0] $end
$var wire 8 / RESULT [7:0] $end
$upscope $end
$scope module And $end
$var wire 8 0 DATA1 [7:0] $end
$var wire 8 1 DATA2 [7:0] $end
$var wire 8 2 RESULT [7:0] $end
$upscope $end
$scope module Forward $end
$var wire 8 3 DATA2 [7:0] $end
$var wire 8 4 RESULT [7:0] $end
$upscope $end
$scope module Or $end
$var wire 8 5 DATA1 [7:0] $end
$var wire 8 6 DATA2 [7:0] $end
$var wire 8 7 RESULT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 7
b1001110 6
b10000001 5
bx 4
b1001110 3
bx 2
b1001110 1
b10000001 0
bx /
b1001110 .
b10000001 -
bx ,
bx +
bx *
bx )
bx (
bx '
b1001110 &
b10000001 %
bx $
b1001110 #
b10000001 "
bx !
$end
#1
b11001111 (
b11001111 7
b0 *
b0 2
b1001110 )
b1001110 4
#2
b11001111 +
b11001111 /
#10
b11001111 !
b11001111 ,
b1 $
b1 '
#15
b0 !
b0 ,
b10 $
b10 '
#20
b11001111 !
b11001111 ,
b11 $
b11 '
#25
b1001110 !
b1001110 ,
b1111110 #
b1111110 &
b1111110 .
b1111110 1
b1111110 3
b1111110 6
b0 $
b0 '
#26
b11111111 (
b11111111 7
b1111110 )
b1111110 4
#27
b11111111 +
b11111111 /
#100
