$date
	Fri Oct 30 22:22:11 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var wire 32 " INSTRUCTION [31:0] $end
$var reg 1 # CLK $end
$var reg 1 $ RESET $end
$scope module mycpu $end
$var wire 1 % BRANCH_FALG $end
$var wire 1 # CLK $end
$var wire 32 & INSTRUCTION [31:0] $end
$var wire 1 ' JUMP_FALG $end
$var wire 1 $ RESET $end
$var wire 1 ( ZERO_AND_BRANCHFLAG $end
$var wire 1 ) ZERO $end
$var wire 3 * WRITEREG [2:0] $end
$var wire 1 + WRITEENABLE $end
$var wire 8 , REGOUT2 [7:0] $end
$var wire 8 - REGOUT1 [7:0] $end
$var wire 3 . READREG2 [2:0] $end
$var wire 3 / READREG1 [2:0] $end
$var wire 32 0 PC_PLUS4 [31:0] $end
$var wire 32 1 PC_NEXT_JUMP [31:0] $end
$var wire 32 2 JUMP_IMMEDIATE_RAW [31:0] $end
$var wire 32 3 JUMP_IMMEDIATE_FINAL [31:0] $end
$var wire 1 4 IMMEDIATE_FALG $end
$var wire 8 5 IMMEDIATE [7:0] $end
$var wire 1 6 COMPLEMENT_FLAG $end
$var wire 8 7 COMPLEMENTED_OUT [7:0] $end
$var wire 8 8 ALU_RESULT [7:0] $end
$var wire 3 9 ALUOP [2:0] $end
$var reg 8 : COMPLEMENT_MUX_OUT [7:0] $end
$var reg 8 ; IMMEDIATE_MUX_OUT [7:0] $end
$var reg 1 < MUX_3_OUT $end
$var reg 32 = PC [31:0] $end
$var reg 32 > PC_NEXT [31:0] $end
$scope module ALU $end
$var wire 8 ? DATA2 [7:0] $end
$var wire 8 @ or_out [7:0] $end
$var wire 8 A forward_out [7:0] $end
$var wire 8 B and_out [7:0] $end
$var wire 8 C add_out [7:0] $end
$var wire 3 D SELECT [2:0] $end
$var wire 8 E DATA1 [7:0] $end
$var reg 8 F RESULT [7:0] $end
$var reg 1 ) ZERO $end
$scope module Add $end
$var wire 8 G DATA2 [7:0] $end
$var wire 8 H RESULT [7:0] $end
$var wire 8 I DATA1 [7:0] $end
$upscope $end
$scope module And $end
$var wire 8 J DATA2 [7:0] $end
$var wire 8 K RESULT [7:0] $end
$var wire 8 L DATA1 [7:0] $end
$upscope $end
$scope module Forward $end
$var wire 8 M DATA2 [7:0] $end
$var wire 8 N RESULT [7:0] $end
$upscope $end
$scope module Or $end
$var wire 8 O DATA2 [7:0] $end
$var wire 8 P RESULT [7:0] $end
$var wire 8 Q DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module complementor $end
$var wire 8 R REGOUT2 [7:0] $end
$var wire 8 S COMPLEMENTED_OUT [7:0] $end
$upscope $end
$scope module ctrlUnit $end
$var wire 32 T INSTRUCTION [31:0] $end
$var wire 8 U opcode [7:0] $end
$var reg 3 V ALUOP [2:0] $end
$var reg 1 W BRANCH_FALG $end
$var reg 1 6 COMPLEMENT_FLAG $end
$var reg 1 4 IMMEDIATE_FALG $end
$var reg 1 X JUMP_FALG $end
$var reg 1 + WRITEENABLE $end
$upscope $end
$scope module pcJumpNext $end
$var wire 32 Y JUMP_IMMEDIATE_FINAL [31:0] $end
$var wire 32 Z PC_PLUS4 [31:0] $end
$var wire 32 [ PC_NEXT_JUMP [31:0] $end
$upscope $end
$scope module pcNext $end
$var wire 32 \ PC [31:0] $end
$var wire 32 ] PC_PLUS4 [31:0] $end
$upscope $end
$scope module regFile $end
$var wire 1 # CLK $end
$var wire 8 ^ IN [7:0] $end
$var wire 3 _ INADDRESS [2:0] $end
$var wire 8 ` OUT1 [7:0] $end
$var wire 3 a OUT1ADDRESS [2:0] $end
$var wire 8 b OUT2 [7:0] $end
$var wire 3 c OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 + WRITE $end
$var integer 32 d i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx00 Y
xX
xW
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
x<
bx ;
bx :
bx 9
bx 8
bx 7
x6
bx 5
x4
bx00 3
b0xxxxxxxx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
x+
bx *
x)
x(
z'
bx &
z%
1$
0#
bx "
bx !
$end
#4
b1000 d
1#
#5
b0 !
b0 =
b0 \
0$
#7
b0 *
b0 _
b1 /
b1 a
b0 .
b0 c
b0 3
b0 Y
b0 5
b0 2
b1 U
b100 0
b100 Z
b100 ]
b1000000000000000100000000 "
b1000000000000000100000000 &
b1000000000000000100000000 T
#8
b0 9
b0 D
b0 V
0X
0W
04
06
1+
0#
#9
b0 ;
b0 ?
b0 G
b0 J
b0 M
b0 O
b0 :
b0 -
b0 E
b0 I
b0 L
b0 Q
b0 `
b0 ,
b0 R
b0 b
b100 1
b100 [
#10
b0 8
b0 F
b0 ^
b0 @
b0 P
b0 A
b0 N
b0 B
b0 K
b0 7
b0 S
#11
1)
b0 C
b0 H
#12
1#
#13
bx !
bx =
bx \
#15
bx *
bx _
bx /
bx a
bx .
bx c
bx00 3
bx00 Y
bx 5
b0xxxxxxxx 2
bx U
bx 0
bx Z
bx ]
bx "
bx &
bx T
#16
0+
0#
#17
bx ;
bx ?
bx G
bx J
bx M
bx O
bx :
bx -
bx E
bx I
bx L
bx Q
bx `
bx ,
bx R
bx b
bx 1
bx [
#18
bx 8
bx F
bx ^
bx B
bx K
bx A
bx N
bx @
bx P
bx 7
bx S
#19
0(
0)
bx C
bx H
#20
1#
#24
0#
#28
1#
#32
0#
#36
1#
#40
0#
#44
1#
#48
0#
#52
1#
#56
0#
#60
1#
#64
0#
#68
1#
#72
0#
#76
1#
#80
0#
#84
1#
#88
0#
#92
1#
#96
0#
#100
1#
#104
0#
#108
1#
#112
0#
#116
1#
#120
0#
#124
1#
#128
0#
#132
1#
#136
0#
#140
1#
#144
0#
#148
1#
#152
0#
#156
1#
#160
0#
#164
1#
#168
0#
#172
1#
#176
0#
#180
1#
#184
0#
#188
1#
#192
0#
#196
1#
#200
0#
#204
1#
#208
0#
#212
1#
#216
0#
#220
1#
#224
0#
#228
1#
#232
0#
#236
1#
#240
0#
#244
1#
#248
0#
#252
1#
#256
0#
#260
1#
#264
0#
#268
1#
#272
0#
#276
1#
#280
0#
#284
1#
#288
0#
#292
1#
#296
0#
#300
1#
#304
0#
#308
1#
#312
0#
#316
1#
#320
0#
#324
1#
#328
0#
#332
1#
#336
0#
#340
1#
#344
0#
#348
1#
#352
0#
#356
1#
#360
0#
#364
1#
#368
0#
#372
1#
#376
0#
#380
1#
#384
0#
#388
1#
#392
0#
#396
1#
#400
0#
#404
1#
#408
0#
#412
1#
#416
0#
#420
1#
#424
0#
#428
1#
#432
0#
#436
1#
#440
0#
#444
1#
#448
0#
#452
1#
#456
0#
#460
1#
#464
0#
#468
1#
#472
0#
#476
1#
#480
0#
#484
1#
#488
0#
#492
1#
#496
0#
#500
1#
#504
0#
#505
